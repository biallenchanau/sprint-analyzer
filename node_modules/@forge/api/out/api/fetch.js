"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSandboxRuntimeAPI = exports.getNodeRuntimeAPI = exports.createProxyFetch = void 0;
const tslib_1 = require("tslib");
const node_fetch_1 = tslib_1.__importStar(require("node-fetch"));
const _1 = require(".");
const polyfill_response_1 = require("./polyfill-response");
const createProxyFetch = (provider, remote) => {
    return (url, options) => {
        const proxy = global.proxyInfo;
        const request = new node_fetch_1.Request(url, options);
        const headers = new node_fetch_1.Headers(request.headers);
        headers.set('Forge-Proxy-Target-Relative', request.url);
        headers.set('Forge-Proxy-Authorization', `Bearer ${proxy.token}`);
        const proxyRequest = new node_fetch_1.Request(`${proxy.url}/fpp/provider/${provider}/remote/${remote}`, Object.assign(Object.assign({}, request), { headers }));
        return (0, node_fetch_1.default)(proxyRequest);
    };
};
exports.createProxyFetch = createProxyFetch;
const throwNotImplementedError = () => {
    throw new Error('not implemented');
};
function getNodeRuntimeAPI() {
    return {
        fetch: throwNotImplementedError,
        requestJira: throwNotImplementedError,
        requestConfluence: throwNotImplementedError,
        asUser: () => ({
            requestJira: (0, _1.wrapRequestProduct)((0, exports.createProxyFetch)('user', 'jira')),
            requestConfluence: (0, _1.wrapRequestProduct)((0, exports.createProxyFetch)('user', 'confluence')),
            requestGraph: (0, _1.wrapRequestGraph)((0, exports.createProxyFetch)('user', 'stargate')),
            withProvider: throwNotImplementedError
        }),
        asApp: () => ({
            requestJira: (0, _1.wrapRequestProduct)((0, exports.createProxyFetch)('app', 'jira')),
            requestConfluence: (0, _1.wrapRequestProduct)((0, exports.createProxyFetch)('app', 'confluence')),
            requestGraph: (0, _1.wrapRequestGraph)((0, exports.createProxyFetch)('app', 'stargate'))
        })
    };
}
exports.getNodeRuntimeAPI = getNodeRuntimeAPI;
function getSandboxRuntimeAPI() {
    const { api: globalAPI } = global;
    if (globalAPI && Object.keys(globalAPI).length) {
        return (0, _1.wrapFetchApiMethods)(globalAPI, polyfill_response_1.transformResponse);
    }
    else {
        return null;
    }
}
exports.getSandboxRuntimeAPI = getSandboxRuntimeAPI;
